package com.login.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import static com.login.db.JDBCTemplate.*;

import com.login.dto.MyMemberDto;
import com.sun.net.httpserver.Authenticator.Result;

public class MyMemberDao {
	
	/*
	 * 관리자 (ADMIN) 기능 
	 * 1. 회원 전체 정보 확인 (탈퇴한 회원도 포함) 
	 * 2. 회원 전체 정보 확인 (MYENABLED = 'Y'인 -> 탈퇴안한 회원들의 정보) 
	 * 3. 회원 등급 조정 (ADMIN <-> USER)
	 * 
	 * 
	 */
	//1.전체 정보 
	 public List<MyMemberDto> selectAllUser(){
		 
		 Connection con = getConnection();
		 String sql = " SELECT MYNO,MYID,MYPW,MYNAME,MYADDR,MYPHONE,MYEMAIL,MYENABLED,MYROLE "
		 		+ " FROM MYMEMBER ORDER BY MYNO DESC ";
		 
		 PreparedStatement pstm = null;
		 ResultSet rs= null; 
		 List<MyMemberDto> list = new ArrayList<MyMemberDto>();
		 
		 try {
			pstm = con.prepareStatement(sql);
			System.out.println("3. query  준비 : " +sql);
			
			rs= pstm.executeQuery();
			while(rs.next()) {
				MyMemberDto dto = new MyMemberDto();
				dto.setMyno(rs.getInt(1));
				dto.setMyid(rs.getString(2));
				dto.setMypw(rs.getString(3));
				dto.setMyname(rs.getString(4));
				dto.setMyaddr(rs.getString(5));
				dto.setMyphone(rs.getString(6));
				dto.setMyemail(rs.getString(7));
				dto.setMyenabled(rs.getString(8));
				dto.setMyrole(rs.getString(9));
				
				list.add(dto);
			}
		} catch (SQLException e) {
			
			e.printStackTrace();
		}finally {
			close(rs);
			close(pstm);
			close(con);
			System.out.println("5. db 종료");
		}
		 return list;
	 }
	 //2. 전체 정보(탈퇴안한)  where 
	 public List<MyMemberDto> selectEnabledUser(){
		 
		 Connection con = getConnection();
		 String sql = " SELECT MYNO,MYID,MYPW,MYNAME,MYADDR,MYPHONE,MYEMAIL,MYENABLED,MYROLE "
		 		+ " FROM MYMEMBER WHERE MYENABLED='Y' ";
		 
		 Statement stmt = null;
		 ResultSet rs = null;
		 List<MyMemberDto> list = new ArrayList<MyMemberDto>();
		 
		 try {
			stmt = con.createStatement();
			System.out.println("3.쿼리 준비 :" +sql);
			rs =stmt.executeQuery(sql);
			while(rs.next()) {
				MyMemberDto dto = new MyMemberDto();
				dto.setMyno(rs.getInt(1));
				dto.setMyid(rs.getString(2));
				dto.setMypw(rs.getString(3));
				dto.setMyname(rs.getString(4));
				dto.setMyaddr(rs.getString(5));
				dto.setMyphone(rs.getString(6));
				dto.setMyemail(rs.getString(7));
				dto.setMyenabled(rs.getString(8));
				dto.setMyrole(rs.getString(9));
				
				list.add(dto);
			}
		} catch (SQLException e) {
			
			e.printStackTrace();
		}finally {
			close(rs); 
			close(stmt);
			close(con);
			System.out.println("5.db 종료! ");
		}
		 
		 return list;
	 }
	 
	 //3. 회원 등급 조정 
	 public int updateRole(int myno, String myrole) {
		 
		 Connection con= getConnection();
		 String sql= " UPDATE MYMEMBER  "
		 		+ " SET MYROLE=? "
		 		+ " WHERE MYNO=?"; 
		 
		 PreparedStatement pstm = null; 
		 int res = 0; 
		 
		 try {
			pstm = con.prepareStatement(sql);
			pstm.setString(1, myrole);
			pstm.setInt(2, myno);
			
			res= pstm.executeUpdate();
			
			if(res>0) {
				commit(con);
			}
		} catch (SQLException e) {
			
			e.printStackTrace();
		}finally {
			close(pstm);
			close(con);
		}
		 
		 return res;
	 }
	 
	 /*
	  * 사옹자 (USER) 기능
	  * 1.로그인 
	  * 3. 회원가입 <<- 2. 아이디 중복체크 
	  * 4. 내 정보 조회 
	  * 5. 내 정보 수정 
	  * 6. 회원 탈퇴 (DELETE 안 쓸것 ! UPDATE: myenabled  를 n 으로 바꾸자 ) 
	  * 
	  */
	 //1. 로그인 
	 public MyMemberDto login(String myid,String mypw) {
		 Connection con = getConnection();
		 String sql = "SELECT MYNO,MYID,MYPW,MYNAME,MYADDR,MYPHONE,MYEMAIL,MYENABLED,MYROLE "
		 		+ "FROM MYMEMBER "
		 		+ " WHERE MYID= ? "
		 		+ " AND MYPW= ? ";
		 
		 PreparedStatement pstm = null;
		 ResultSet rs = null;
		 
		 //side effect 
		 MyMemberDto dto = null;
		 // 원래 하던대로 new MyMEmberDtro() ; 를 바로 해버리면 객체가 담기기 떄문에 if(dto != null){ 했을때 무조건 값이 있는걸로 반영된다 
		 
		 
		 try {
			pstm=con.prepareStatement(sql);
			pstm.setString(1, myid);
			pstm.setString(2, mypw);
			System.out.println("3.query  준비: " +sql);
			rs=pstm.executeQuery();
			while(rs.next()) {
				dto= new MyMemberDto();
				dto.setMyno(rs.getInt("myno"));
				dto.setMyid(rs.getString("myid"));
				dto.setMyname(rs.getString("myname"));
				dto.setMypw(rs.getString("mypw"));
				dto.setMyaddr(rs.getString("myaddr"));
				dto.setMyphone(rs.getString("myphone"));
				dto.setMyemail(rs.getString("myemail"));
				dto.setMyenabled(rs.getString("myenabled"));
				dto.setMyrole(rs.getString("myrole"));
				
			}
		} catch (SQLException e) {
			
			e.printStackTrace();
		}finally {
			close(rs);
			close(pstm);
			close(con);
		}
		 
		 return dto;
	 }
	 
	 //2. 중복 체크 
	 public MyMemberDto idCheck(String myid) {
		 Connection con = getConnection();
		 String sql = " SELECT MYNO,MYID,MYPW,MYNAME,MYADDR,MYPHONE,MYEMAIL,MYENABLED,MYROLE"
		 		+ " FROM MYMEMBER "
		 		+ " WHERE MYID= ? ";
		 
		PreparedStatement pstm = null; 
		ResultSet rs = null ;
		MyMemberDto dto = new MyMemberDto(); // 여기는 무조건 !!!!!!!!! null 쓰면 안댄다 여기가 null 이면 npe 뜬다 
		
		try {
			pstm = con.prepareStatement(sql);
			pstm.setString(1, myid);
			
			rs= pstm.executeQuery();
			while(rs.next()) {
				dto.setMyno(rs.getInt("myno"));
				dto.setMyid(rs.getString("myid"));
				dto.setMyname(rs.getString("myname"));
				dto.setMypw(rs.getString("mypw"));
				dto.setMyaddr(rs.getString("myaddr"));
				dto.setMyphone(rs.getString("myphone"));
				dto.setMyemail(rs.getString("myemail"));
				dto.setMyenabled(rs.getString("myenabled"));
				dto.setMyrole(rs.getString("myrole"));
			}
		} catch (SQLException e) {
			
			e.printStackTrace();
		}finally {
			close(rs);
			close(pstm);
			close(con);
		}
		
		 return dto;
	 }
	 //3. 회원 가입 
	 public int insertUser(MyMemberDto dto) {
		 Connection con = getConnection();
		 String sql = "	INSERT INTO MYMEMBER "
		 		+ " VALUES(MYMEMBERSEQ.NEXTVAL,?,?,?,?,?,?,'Y','USER') ";
		 
		 PreparedStatement pstm = null;
		 int res = 0 ; 
		 
		 try {
			pstm = con.prepareStatement(sql);
			//MYID,MYPW,MYNAME,MYADDR,MYPHONE,MYEMAIL
			pstm.setString(1, dto.getMyid());
			pstm.setString(2, dto.getMypw());
			pstm.setString(3, dto.getMyname());
			pstm.setString(4, dto.getMyaddr());
			pstm.setString(5, dto.getMyphone());
			pstm.setString(6, dto.getMyemail());
			
			res=pstm.executeUpdate();
			if(res>0) {
				commit(con);
			}
					
		} catch (SQLException e) {
			
			e.printStackTrace();
		}finally {
			close(pstm);
			close(con);
		}
		 
		return res;
		 
	 }
	 //4. 정보조회 
	 public MyMemberDto selectUser(int myno) {
		 Connection con = getConnection(); 
		 String sql = "SELECT MYNO,MYID,MYPW,MYNAME,MYADDR,MYPHONE,MYEMAIL,MYENABLED,MYROLE "
		 		+ " FROM MYMEMBER WHERE MYNO = ? ";
		 PreparedStatement 	pstm = null; 
		 ResultSet rs = null; 
		 MyMemberDto dto = new MyMemberDto();
		 
		 try {
			pstm = con.prepareStatement(sql);
			pstm.setInt(1, myno);
			System.out.println("3.쿼리준비 : " +sql);
			
			rs = pstm.executeQuery();
			System.out.println("4.쿼리 실행 및 리턴 ");
			while(rs.next()) {
				dto.setMyno(rs.getInt(1));
				dto.setMyid(rs.getString("myid"));
				dto.setMyname(rs.getString("myname"));
				dto.setMypw(rs.getString("mypw"));
				dto.setMyaddr(rs.getString("myaddr"));
				dto.setMyphone(rs.getString("myphone"));
				dto.setMyemail(rs.getString("myemail"));
				dto.setMyenabled(rs.getString("myenabled"));
				dto.setMyrole(rs.getString("myrole"));
			
				
			}
					
		} catch (SQLException e) {
			
			e.printStackTrace();
		}finally {
			close(rs);
			close(pstm);
			close(con);
			System.out.println("db 종료 ");
		}
		 
		 return dto;
	 }
	 
	 //5. 정보 수정 
	 public int updateUser(MyMemberDto dto) {
		 //MYNAME,MYADDR,MYPHONE,MYEMAIL
		 Connection con = getConnection();
		 String sql = " UPDATE MYMEMBER "
		 		+ " SET MYPW=? ,MYNAME=?, MYADDR=?, MYPHONE=?, MYEMAIL=? "
		 		+ "	WHERE MYNO=? ";
		 
		 PreparedStatement pstm = null;
		 int res = 0; 
		 
		 try {
			pstm= con.prepareStatement(sql);
			pstm.setString(1, dto.getMypw());
			pstm.setString(2, dto.getMyname());
			pstm.setString(3, dto.getMyaddr());
			pstm.setString(4, dto.getMyphone());
			pstm.setString(5, dto.getMyemail());
			pstm.setInt(6, dto.getMyno());
			
			res=pstm.executeUpdate();
			if(res>0) {
				commit(con);
			}
					
		} catch (SQLException e) {
			
			e.printStackTrace();
		}finally {
			close(pstm);
			close(con);
		}
		 
		 
		 return res;
	 }
	 //6. 회원 탈퇴 (update) 
	 public int deleteUser(int myno) {
		 return 0 ;
	 }
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
}
